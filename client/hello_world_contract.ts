// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "hello_world_contract.proto" (syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { StringValue } from "./google/protobuf/wrappers";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * An event that will be emitted from contract method call
 *
 * @generated from protobuf message UpdatedMessage
 */
export interface UpdatedMessage {
    /**
     * @generated from protobuf field: string value = 1;
     */
    value: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class UpdatedMessage$Type extends MessageType<UpdatedMessage> {
    constructor() {
        super("UpdatedMessage", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "aelf.is_event": true });
    }
    create(value?: PartialMessage<UpdatedMessage>): UpdatedMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<UpdatedMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatedMessage): UpdatedMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string value */ 1:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatedMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string value = 1; */
        if (message.value !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdatedMessage
 */
export const UpdatedMessage = new UpdatedMessage$Type();
/**
 * @generated ServiceType for protobuf service tmp
 */
export const tmp = new ServiceType("tmp", [
    { name: "Update", options: {}, I: StringValue, O: Empty },
    { name: "Read", options: { "aelf.is_view": true }, I: Empty, O: StringValue }
], { "aelf.csharp_state": "AElf.Contracts.tmp.tmpState" });
