// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "hello_world_contract.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { tmp } from "./hello_world_contract";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "./google/protobuf/empty";
import type { StringValue } from "./google/protobuf/wrappers";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service tmp
 */
export interface ItmpClient {
    /**
     * Actions (methods that modify contract state)
     * Stores the value in contract state
     *
     * @generated from protobuf rpc: Update(google.protobuf.StringValue) returns (google.protobuf.Empty);
     */
    update(input: StringValue, options?: RpcOptions): UnaryCall<StringValue, Empty>;
    /**
     * Views (methods that don't modify contract state)
     * Get the value stored from contract state
     *
     * @generated from protobuf rpc: Read(google.protobuf.Empty) returns (google.protobuf.StringValue);
     */
    read(input: Empty, options?: RpcOptions): UnaryCall<Empty, StringValue>;
}
/**
 * @generated from protobuf service tmp
 */
export class tmpClient implements ItmpClient, ServiceInfo {
    typeName = tmp.typeName;
    methods = tmp.methods;
    options = tmp.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Actions (methods that modify contract state)
     * Stores the value in contract state
     *
     * @generated from protobuf rpc: Update(google.protobuf.StringValue) returns (google.protobuf.Empty);
     */
    update(input: StringValue, options?: RpcOptions): UnaryCall<StringValue, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StringValue, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Views (methods that don't modify contract state)
     * Get the value stored from contract state
     *
     * @generated from protobuf rpc: Read(google.protobuf.Empty) returns (google.protobuf.StringValue);
     */
    read(input: Empty, options?: RpcOptions): UnaryCall<Empty, StringValue> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, StringValue>("unary", this._transport, method, opt, input);
    }
}
